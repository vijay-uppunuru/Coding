
	/*
	we can generate a bit-string of length n from bit-strings of length n-1

	Valid bit-strings fall into 2 classes, ones that end with a “0” and ones that end 
	with a “1”. 
	Ones that end in a “1” could be generated by adding a one to a valid bit-string
	of any kind: a(n-1) ways.
	Ones that end with a “0” came about by appending a smaller bit-string of length
	n-1 that ended with a “1” (otherwise 2 zeros appear), which must have come 
	about in turn by appending a “1” to any valid bit-string of length n-2: a(n-2) ways.

	Total: an = a(n-1) + a(n-2)  n>2.   a1 = 2, a2 = 3.

	2,3,5,8,13.....

	But the fibonacci sequence is 1,1,2,3,5,8,13...

	we could get the desired result for n by finding the (n+2)’th Fibonacci number % 10^9+7
	
	Using iterative or recursive solution would be time consuming so we can use Matrix exponential to calculate it.
	
	Multiplying two matrices takes O(K^3) time using standard method, so the overall time complexity to solve a linear recurrence is O(K^3 log N).
	*/


#include <bits/stdc++.h>
#include <vector>

#define REP(i,n) for (int i = 1; i <= n; i++)
using namespace std;

typedef long long ll;
typedef vector<vector<ll> > matrix;

const ll MOD = 1000000007;
const int K = 2;

matrix mul(matrix A, matrix B)
{
    matrix C(K+1, vector<ll>(K+1));
    REP(i, K) REP(j, K) REP(k, K)
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
    return C;
}

matrix pow(matrix A, int p)
{
    if (p == 1)
        return A;
    if (p % 2)
        return mul(A, pow(A, p-1));
    matrix X = pow(A, p/2);
    return mul(X, X);
}

int fib(int N)
{

    vector<ll> F1(K+1);
    F1[1] = 1;
    F1[2] = 1;

    matrix T(K+1, vector<ll>(K+1));
    T[1][1] = 0, T[1][2] = 1;
    T[2][1] = 1, T[2][2] = 1;

    if (N == 1)
        return 1;
    T = pow(T, N-1);

    ll res = 0;
    REP(i, K)
        res = (res + T[1][i] * F1[i]) % MOD;
    return res;
}


int main(){

	int t;
	cin >> t;
	REP(i, t){
		ll n;
		cin >> n;
		cout << fib(n+2) << endl;
		
	}

	return 0;
}
